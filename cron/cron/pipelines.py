import os
from datetime import datetime

from cron.items import BookItem, ChapterItem
from cron.helper import convert_date
from cron.db_connect import DB


class WKBookListPipeline:

    def open_spider(self, spider):
        with open('wk_booklist_time.log', 'a') as f:
            f.write(f'running at {datetime.now()}\n')
        
        self.db = DB()
        self.db.open_db()
        self.cur = self.db.connection.cursor()
        self.create_db()

    def close_spider(self, spider):
        self.cur.close()
        self.db.close_db()

    def process_item(self, item: BookItem, spider):
        try:
            query = f"""
                INSERT INTO raw_local.craw_book_raw(
                    title, url, avatar_url, visibility, author, state, 
                    last_chapter_title, last_chapter_at, 
                    categories, summary) 
                values('{item['title']}', '{item['url']}', '{item['avatar_url']}',
                {item['visibility']}, '{item['author']}', '{item['state']}',
                '{item['last_chapter_title']}', '{convert_date(item['last_chapter_at'])}',
                ARRAY [{','.join(item['categories'])}], '{item['summary']}')
                ON CONFLICT (url) DO UPDATE 
                SET visibility = EXCLUDED.visibility, 
                    state = EXCLUDED.state,
                    last_chapter_title = EXCLUDED.last_chapter_title,
                    last_chapter_at = EXCLUDED.last_chapter_at;
            """
            self.cur.execute(query)
            self.db.connection.commit()
        except Exception as e:
            with open('job_error.log', 'a') as f:
                f.write(str(e))
            self.db.connection.rollback()
        return item

    def create_db(self):
        if self.cur:
            # create schema
            schema_create = """
                CREATE SCHEMA IF NOT EXISTS raw_local;
            """
            bookraw_create = """
            CREATE TABLE IF NOT EXISTS raw_local.craw_book_raw (
                id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                title varchar(255) NOT NULL,
                url varchar(255) UNIQUE NOT NULL,
                avatar_url varchar(255) NOT NULL,
                visibility int NOT NULL,
                author varchar(128) NOT NULL,
                state varchar(30) NOT NULL,
                last_chapter_title varchar(255),
                last_chapter_at date,
                categories varchar(30) ARRAY,
                summary TEXT,
                is_reading bool DEFAULT FALSE
            );    
            """

            self.cur.execute(schema_create)
            self.cur.execute(bookraw_create)
            self.db.connection.commit()


class WKBookChapPipeline:

    def open_spider(self, spider):
        with open('wk_chapter_time.log', 'a') as f:
            f.write(f'running at {datetime.now()}\n')

        self.db = DB()
        self.db.open_db()
        self.cur = self.db.connection.cursor()
        self.create_db()

    def close_spider(self, spider):
        self.cur.close()
        self.db.close_db()

    def process_item(self, item: ChapterItem, spider):
        try:
            query = f"""
                INSERT INTO raw_local.craw_chapter_raw(
                    book_id, title, url, content) 
                values({item['book_id']}, '{item['title']}',
                '{item['url']}', {item['content']})
                ON CONFLICT (url) DO NOTHING;
            """
            self.cur.execute(query)
            self.db.connection.commit()
        except Exception as e:
            with open('wk_chapter_error.log', 'a') as f:
                f.write(str(e))
            self.db.connection.rollback()
        return item

    def create_db(self):
        if self.cur:
            chapraw_create = """
            CREATE TABLE IF NOT EXISTS raw_local.craw_chapter_raw (
                id int PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
                book_id int,
                title varchar(255) NOT NULL,
                url varchar(255) UNIQUE NOT NULL,
                content text NOT NULL,
                create_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
                CONSTRAINT fk_book_chapter
                    FOREIGN KEY(book_id) 
	                REFERENCES raw_local.craw_book_raw(id)
            );    
            """

            self.cur.execute(chapraw_create)
            self.db.connection.commit()
